	6 bits - 2 bits fixed point integer

	0 0 0 1 1 1 . 0 0 = 7
	0 0 0 1 1 1 . 1 0 = 7.5
	1 << 2 = 1 0 0
	
	0 0 0 0 0 1 1 1 * ( 1 0 0 ) = 0 0 0 1 1 1 0 0

	0 0 0 0 0 1 1 1 / ( 1 0 0 ) = 0 0 0 0 0 0 0 1   (1 1 as remainder)

	multiplying by (1 0 0) shift the bits to the left
	dividing by (1 0 0) shift the bits to the right

	How can we differentiate float from integers in fixed point notation?

		0 0 0 1 1 1 . 1 0 = 7.5
						1
	&					0
		0 0 0 1 1 1 . 1 0 = 7.5
					  1	0
	&				  1 0 >> 1
						1

		0 0 0 1 1 1 . 1 0 = 7.5
	*	0 0 0 0 1 0 . 0 0 = 2
	---------------------
	    0 0 0 0 0 0 0 0 0 
	    0 0 0 0 0 0 0 0 x 

	=	0 0 1 1 1 1 . 0 0 = 15

	Multiplying 2 fixed point numbers 

		0 0 0 1 1 1 . 1 0 = 7.5
	*	0 0 0 0 1 0 . 1 0 = 2.5
	=	0 1 0 0 1 0 . 1 1 = 18.75
	7.5
	2.5
	----
	3 7 5
  1 5 0 0
  -------
  1 8 . 7 5

		0 0 0 1 1 1 . 1 0 = 7.5
	*	0 0 0 0 1 0 . 1 0 = 2.5
	---------------------
	    0 0 0 0 0 0 0 0 0 
	    0 0 0 1 1 1 1 0 x 
	    0 0 0 0 0 0 0 x x 
	    0 1 1 1 1 0 x x x 
	---------------------
	    1 0 0 1 0 1 1 0 0 
						  << 2
						  
		0 0 0 1 1 1 . 1 1 = 7.75
	*	0 0 0 0 1 0 . 1 1 = 2.75 => 21,3125
	---------------------
	    0 0 0 0 1 1 1 1 1 
	    0 0 0 1 1 1 1 1 x 
	    0 0 0 0 0 0 0 x x 
	    0 1 1 1 1 1 x x x 
	---------------------
	    1 0 1 0 1 0 1 0 1 
		1 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0
   /				1 0 0
	---------------------

	    1 0 1 0 1 . 0 1 0 1 = 1 + 4 + 16 + 0.25 + 0.0625 = 21.3125

	
		 0 0 0 0 0 0 1 1
	<< 2 0 0 0 0 1 1 0 0						


		 0 0 0 0 0 0 1 1
	*	 0 0 0 0 0 1 0 0
	---------------------
	     0 0 0 0 0 0 0 0 
	     0 0 0 0 0 0 0 x 
	     0 0 0 0 1 1 x x 
	---------------------
	     0 0 0 0 1 1 0 0 
